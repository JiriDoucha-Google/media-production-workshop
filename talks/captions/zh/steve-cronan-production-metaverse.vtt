WEBVTT FILE

1
00:05.400 --> 00:06.233
大家好 欢迎来到

2
00:06.233 --> 00:08.400
制片元宇宙

3
00:08.400 --> 00:09.490
今天 我们将探讨

4
00:09.490 --> 00:11.400
什么是制片元宇宙

5
00:11.400 --> 00:14.330
元数据是如何用于协调工作室

6
00:14.330 --> 00:16.120
和制片流程

7
00:16.120 --> 00:18.310
有哪些独特的挑战

8
00:18.310 --> 00:19.930
它又是如何在这些工作室的

9
00:19.930 --> 00:22.800
虚拟制作中使用的

10-p
00:22.800 --> 00:24.837
先说说制作过程的

11
00:24.837 --> 00:27.180
一些基础知识

12
00:27.180 --> 00:30.730
脚本是起点 那是故事的基石

13
00:30.730 --> 00:32.480
在此基础上调研

14
00:32.480 --> 00:34.500
你从网络上调取图片

15
00:34.500 --> 00:36.335
你用故事板和概念图

16
00:36.335 --> 00:38.668
创造独特的内容

17
00:38.668 --> 00:41.250
你跑遍世界各地

18
00:41.250 --> 00:42.550
拍摄照片

19
00:42.550 --> 00:45.770
用架构图纸进行布景设计

20
00:45.770 --> 00:48.470
用一系列其他内容进行浇筑成型

21-p
00:48.470 --> 00:50.831
然后当你进入拍摄阶段时 你会以高帧率

22
00:50.831 --> 00:54.290
捕捉各种不同的分辨率

23
00:54.290 --> 00:56.500
并可能在多个地点的

24
00:56.500 --> 00:59.700
多个单位拍摄多个镜头

25
00:59.700 --> 01:01.374
一个制片流程在短短的几个月内

26
01:01.374 --> 01:04.160
就可能积累上千TB甚至PB的素材

27
01:04.160 --> 01:05.650
这种情况并不罕见

28
01:05.650 --> 01:08.401
而且还需要将所有这些内容上传到云端

29
01:08.401 --> 01:12.220
分发给多个制作团队

30
01:12.220 --> 01:15.900
他们都以不同的方式

31
01:15.900 --> 01:16.500
在不同的阶段处理这些内容

32
01:16.500 --> 01:19.320
并且在制作过程中有不同的需求

33-p
01:19.320 --> 01:21.540
剪辑部门将把这些东西剪在一起

34
01:21.540 --> 01:25.390
并将所有视觉特效团队和视觉特效层

35
01:25.390 --> 01:27.230
还有视觉元素组合在一起

36
01:27.230 --> 01:29.376
同时将市场营销

37
01:29.376 --> 01:33.190
和许可授权机制引入工作室

38-p
01:33.190 --> 01:36.760
如我所说 故事的基础其实从脚本开始

39
01:36.760 --> 01:39.260
有意思的是 脚本是一个结构化的文件

40
01:39.260 --> 01:42.870
左边有场景 室外 室内

41
01:42.870 --> 01:46.960
白天/夜晚标签 故事地点 人物等等

42
01:46.960 --> 01:49.600
所有这些在脚本中一直都有

43-p
01:49.600 --> 01:52.100
以此为基础 我们从故事地点

44
01:52.100 --> 01:54.220
扩展到实际地点

45
01:54.220 --> 01:59.220
比如实际拍摄的片场

46
01:59.478 --> 02:04.478
或者是用于拍摄的特定布景

47
02:04.670 --> 02:07.770
其中也有虚拟元素的序列和镜头

48
02:07.770 --> 02:11.560
那么视觉效果部门要如何分解信息呢

49
02:11.560 --> 02:14.380
这一切和制片元宇宙

50
02:14.380 --> 02:16.503
又是如何关联的呢

51-p
02:17.900 --> 02:19.260
再细说视觉特效

52
02:19.260 --> 02:21.980
以某个特定镜头为例

53
02:21.980 --> 02:25.480
它会被分解成至少数百帧画面

54
02:25.480 --> 02:28.530
这些帧有不同的层

55
02:28.530 --> 02:30.940
也许是前景板或背景板

56
02:30.940 --> 02:33.250
前景板可能是由模型

57
02:33.250 --> 02:35.600
骨架和贴图组成的

58
02:35.600 --> 02:37.500
并与连续镜头结合在一起

59
02:37.500 --> 02:40.853
只是为了创造出几秒钟的优美画面

60-p
02:42.630 --> 02:43.910
例如

61
02:43.910 --> 02:46.420
我们可以用一个骑马的人作为前景板

62
02:46.420 --> 02:49.629
在背景层中加入一些烟雾 人群

63
02:49.629 --> 02:53.540
还有硝烟 提亮 上色

64
02:53.540 --> 02:55.160
你就会得到这张美妙的图片

65
02:55.160 --> 02:57.760
因此你可以想象一下在全球范围内

66
02:57.760 --> 03:00.568
数以千计的镜头

67
03:00.568 --> 03:04.720
数以千万计的帧

68
03:04.720 --> 03:07.497
都经过这样的处理 就是为了制作这一件作品

69
03:07.497 --> 03:10.223
以及周边产品

70-p
03:11.400 --> 03:14.800
因此 重要的是你需要有一个统一的框架

71
03:14.800 --> 03:16.220
如何从文件元数据构建这些信息

72
03:16.220 --> 03:19.990
文件在资源中结构如何

73
03:19.990 --> 03:22.890
角色与演员之间的连接组织

74
03:22.890 --> 03:27.190
尽可能利用人工智能分析

75
03:27.190 --> 03:28.550
实现自动化

76
03:28.550 --> 03:31.650
通过诸如FileMaker Ftrack或Shotgun等外部数据库

77
03:31.650 --> 03:35.963
将镜头与视效团队联系起来

78-p
03:36.850 --> 03:39.170
如何从制片的所有不同阶段建立支柱

79
03:39.170 --> 03:41.990
从选角和前期制作

80
03:41.990 --> 03:46.990
到现场拍摄 到后期的编辑和归档

81
03:47.800 --> 03:50.712
一直到元宇宙和实体

82-p
03:50.712 --> 03:54.000
于是我们利用所有这些数据来协调状态变化

83
03:54.000 --> 03:57.562
和触发事件的流程 以便在不同的情况下

84
03:57.562 --> 04:00.310
用不同的应用程序进行转码和文件传输

85
04:00.310 --> 04:03.810
这都是为了尽可能快地移动这些数据

86
04:03.810 --> 04:06.948
以便给予创作者尽可能多的时间

87
04:06.948 --> 04:10.270
在他们赶在最后期限之前做出决策

88-p
04:10.270 --> 04:12.700
说到制片 不得不提的是

89
04:12.700 --> 04:13.656
你有一个发布日期

90
04:13.656 --> 04:15.640
而制片的目标是

91
04:15.640 --> 04:18.182
在有限的时间内创造出最好的作品

92
04:18.182 --> 04:22.618
因此我们的作用就是

93
04:22.618 --> 04:25.770
尽可能促进协作 提高决策的速度

94
04:25.770 --> 04:28.823
以及源源不断的创意

95-p
04:30.100 --> 04:32.100
而我们在浏览器中发现的一些关键挑战

96
04:32.100 --> 04:34.853
包括处理大尺寸的文件

97
04:34.853 --> 04:38.302
以及对全球范围内大文件传输

98
04:38.302 --> 04:41.870
进行UDP加速

99
04:41.870 --> 04:42.630
当你必须在一夜之间

100
04:42.630 --> 04:45.530
上传数TB的文件 并且需要传到另一个地方

101
04:45.530 --> 04:48.300
交付给下一个艺术家来处理时

102
04:48.300 --> 04:50.800
你真的需要Aspera和Signiant这样的常用工具

103
04:50.800 --> 04:53.661
来为你提供稳健性

104
04:53.661 --> 04:56.560
但是如果能够在浏览器中获得本地支持

105
04:56.560 --> 04:57.393
那就太好了

106-p
04:57.393 --> 05:00.320
当然 上传文件夹

107
05:00.320 --> 05:02.295
现在在浏览器中存在许多挑战

108
05:02.295 --> 05:06.393
结构化的文件 比如一个模型

109
05:06.393 --> 05:08.900
有相关联的骨架和贴图

110
05:08.900 --> 05:11.780
要保持这些结构

111
05:11.780 --> 05:14.850
通常需要人们压缩文件

112
05:14.850 --> 05:17.763
然后在上传后将它们解压

113-p
05:18.610 --> 05:21.350
那些在全球分布的团队中进行的

114
05:21.350 --> 05:23.350
长距离稳健的数据传输

115
05:23.350 --> 05:25.590
比如在新西兰拍摄 而后期工作室在洛杉矶

116
05:25.590 --> 05:28.700
视觉特效公司在英国等等

117
05:28.700 --> 05:31.428
就需要能够高速传输数据

118
05:31.428 --> 05:34.948
特别是投放点的概念

119
05:34.948 --> 05:38.260
如何找到一个大流量的渠道

120
05:38.260 --> 05:40.480
尽可能快地把数据送到你需要的地方

121-p
05:40.480 --> 05:43.310
我们也经常遇到文件重复的问题

122
05:43.310 --> 05:44.760
如果可以在客户端

123
05:44.760 --> 05:46.120
拿到文件校验值

124
05:46.120 --> 05:49.340
也就是一个可计算出来的文件指纹

125
05:49.340 --> 05:51.259
能够识别出你的系统中已经有了这个文件

126
05:51.259 --> 05:54.500
因为我们在不同的地方传输了

127
05:54.500 --> 05:55.350
这么多的文件

128
05:55.350 --> 05:59.183
要是能够交换一个共同的哈希值进行校验

129
05:59.183 --> 06:02.180
这将在没有重复数据的情况下

130
06:02.180 --> 06:04.523
实现更快的传输

131-p
06:04.523 --> 06:07.900
当然 编辑既具有云端也具有实地属性

132
06:07.900 --> 06:10.929
既具有工作室也具有家中属性

133
06:10.929 --> 06:14.230
协调传输这些数据 在合理的时间内

134
06:14.230 --> 06:15.857
把它送到需要的地方

135
06:15.857 --> 06:19.150
这也推动了将桌面端带到数据

136
06:19.150 --> 06:22.200
或者说带到云端的需求

137
06:22.200 --> 06:26.390
因此 直接在云中运行通用操作系统

138
06:26.390 --> 06:29.100
和普通应用程序的需求

139
06:29.100 --> 06:30.740
正在日益增长

140
06:30.740 --> 06:33.820
还有很多处理原始媒体成本的挑战

141
06:33.820 --> 06:35.954
总是需要转码

142
06:35.954 --> 06:40.753
难以用任何形式的水印保护

143-p
06:40.753 --> 06:44.100
在成品播放方面已经有了良好的发展

144
06:44.100 --> 06:46.285
显然在浏览器上 正如我们所看到的

145
06:46.285 --> 06:50.450
在诸多视频技术的加持下 如碎片化的MP4

146
06:50.450 --> 06:53.774
以及低延迟流媒体直播目前正在加速发展

147
06:53.774 --> 06:57.150
但对更高比特率的需求

148
06:57.150 --> 07:00.202
更高的保真度 5.1音频等等

149
07:00.202 --> 07:03.400
肯定是一个更高的要求

150
07:03.400 --> 07:05.600
视觉和取证水印一直是

151
07:05.600 --> 07:07.310
我们工作的基础

152-p
07:07.310 --> 07:10.500
在Flash的安全性还凑合的时代

153
07:10.500 --> 07:12.440
我们曾经能够编译一个容器

154
07:12.440 --> 07:17.440
可以让你给媒体流加上数字版权保护

155
07:19.460 --> 07:22.260
并且可以在客户端覆盖

156
07:22.260 --> 07:25.430
利用CDN之类的东西

157
07:25.430 --> 07:28.280
来优化流传输

158
07:28.280 --> 07:32.227
由于我们已经告别了Flash 而WebAssembly

159
07:32.227 --> 07:35.500
从安全的角度来看

160
07:35.500 --> 07:37.768
并不能真正取代它来创建一个安全的容器

161
07:37.768 --> 07:41.875
因此这需要服务器端进行大量的水印处理

162
07:41.875 --> 07:43.930
毋庸置疑

163
07:43.930 --> 07:46.561
这也会给缓冲带来更多的挑战

164-p
07:46.561 --> 07:50.628
而VR360 需要能够在数字版权保护下播放

165
07:50.628 --> 07:54.194
当我们进一步踏入虚拟世界时

166
07:54.194 --> 07:59.000
能够维护版权安全将是至关重要的

167-p
07:59.000 --> 08:01.441
然后是分发方面 离线追踪

168
08:01.441 --> 08:03.328
往往会遇到很多安全问题

169
08:03.328 --> 08:06.980
在数据离线的情况下 我们要如何

170
08:06.980 --> 08:10.480
在操作系统中维持一些保护机制

171
08:10.480 --> 08:11.948
或保护浏览器和操作系统之间的交接

172
08:11.948 --> 08:13.995
能够下载文件夹

173
08:13.995 --> 08:16.180
以便你可以保持这些结构

174
08:16.180 --> 08:18.540
正如我们谈到的上传的挑战

175
08:18.540 --> 08:20.956
然后大规模利用音频和人工智能分析

176
08:20.956 --> 08:23.206
我认为正朝着正确的方向发展

177
08:23.206 --> 08:26.270
我们将在未来更多利用它们

178-p
08:26.270 --> 08:28.114
希望你在这段演讲中有所收获

179
08:28.114 --> 08:32.410
比如我们在工作室协作中使用的

180
08:32.410 --> 08:34.610
流程和工具 以及我们遇到的挑战

181
08:34.610 --> 08:36.499
希望有朝一日我们能够并肩工作

182
08:36.499 --> 08:37.332
共创辉煌

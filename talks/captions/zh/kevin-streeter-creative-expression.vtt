WEBVTT FILE

1
00:06.540 --> 00:08.200
大家好

2
00:08.200 --> 00:09.330
我叫Kevin Streeter

3
00:09.330 --> 00:11.680
下面我来谈一谈将桌面级创作应用

4
00:11.680 --> 00:15.420
带到web上的一些挑战

5
00:15.420 --> 00:17.790
在这次演讲中 我们将首先

6
00:17.790 --> 00:20.230
对用来创建强大创作工具的许多技术领域

7
00:20.230 --> 00:22.910
进行概括总结

8
00:22.910 --> 00:26.450
然后 我们将深入探讨一些选定的主题

9
00:26.450 --> 00:29.550
更好地了解需要从网页中获得什么能力

10
00:29.550 --> 00:31.410
来实现这一切

11
00:31.410 --> 00:32.453
我们开始吧

slide-2
00:34.550 --> 00:35.523
第一张幻灯片

13
00:36.390 --> 00:38.860
创作者们已经习惯于轻松使用

14
00:38.860 --> 00:41.900
桌面级硬件的全部力量

15
00:41.900 --> 00:44.480
我们怎样才能建立

16
00:44.480 --> 00:46.923
具有同等水平的性能和表现力的应用

17
00:48.200 --> 00:51.953
同时又兼具基于网页体验的所有好处呢

18-p
00:52.940 --> 00:55.620
以下是一些应用程序

19
00:55.620 --> 00:58.163
利用传统桌面平台的方法

20-p
00:59.100 --> 01:02.970
这些应用程序可以完全访问64位CPU

21
01:02.970 --> 01:07.350
以及性能或指令集 如AVX

22-p
01:07.350 --> 01:09.813
它们可以访问大量的内存

23-p
01:10.910 --> 01:13.100
可以完全访问磁盘硬件

24
01:13.100 --> 01:15.200
和本地文件系统

25-p
01:15.200 --> 01:18.523
它们使用底层API来提高性能和效率

26-p
01:20.140 --> 01:23.110
它们对色彩管理和色彩空间有端到端的支持

27
01:23.110 --> 01:26.480
可以实现宽色域

28
01:26.480 --> 01:28.323
和高动态范围

29-p
01:29.640 --> 01:32.400
桌面软件可以使用硬件输入设备

30
01:32.400 --> 01:35.163
如手写笔 触笔和其他设备

31-p
01:36.100 --> 01:39.600
它们可以使用现代媒体解码和编码

32
01:39.600 --> 01:41.243
特别是视频编码和解码

33-p
01:42.400 --> 01:45.260
它们可以使用现代GPU管线

34
01:45.260 --> 01:48.143
同时支持图形和计算

35-p
01:49.500 --> 01:51.770
最后 它可以提供高质量的用户体验

36
01:51.770 --> 01:54.330
如剪贴板 无障碍功能和其他功能

37
01:54.330 --> 01:57.550
这些都使得创作工具

38
01:57.550 --> 02:01.463
能真正为专业创作者服务

slide-3
02:04.140 --> 02:04.973
第二张幻灯片

40
02:05.810 --> 02:08.180
我们要深入探讨的第一个领域

41
02:08.180 --> 02:09.480
是WebAssembly的使用

42-p
02:11.340 --> 02:13.970
媒体创作工具往往会混合使用

43
02:13.970 --> 02:17.630
新式和现有的媒体处理代码

44
02:18.340 --> 02:21.863
现有的代码通常是用C++编写的

45
02:23.690 --> 02:27.800
这种代码往往是

46
02:27.800 --> 02:29.963
计算密集型和内存密集型操作的混合

47
02:31.140 --> 02:33.870
重要的是 并非所有这些代码

48
02:33.870 --> 02:36.550
都可以简单地移植到GPU上

49-p
02:36.550 --> 02:38.840
有时 这是因为我们还没有真正找到

50
02:38.840 --> 02:42.560
一个基于GPU的好的解决方案

51
02:42.560 --> 02:45.270
但主要是因为我们有能够正常运行的代码

52
02:45.270 --> 02:47.420
我们会倾向于继续使用它

53-p
02:48.440 --> 02:51.620
随着时间推移 这些代码库已经被大量优化

54
02:51.620 --> 02:54.410
经历了多种不同的优化方式

55
02:54.410 --> 02:55.900
它们在经过优化后可以

56
02:55.900 --> 02:58.550
利用64位处理

57
02:58.550 --> 03:01.300
它们在经历优化后能利用

58
03:01.300 --> 03:04.610
大多数桌面级硬件中存在的

59
03:04.610 --> 03:07.553
SIMD指令集

60-p
03:09.700 --> 03:12.200
如果我们想在web上实现这类功能

61
03:12.200 --> 03:14.670
如今还面临着几项挑战

62
03:14.670 --> 03:17.360
其一是如今的浏览器中

63
03:17.360 --> 03:19.733
对WebAssembly的支持都是32位的

64
03:22.473 --> 03:24.350
这不仅限制了处理能力

65
03:24.350 --> 03:26.910
而且还限制了我们可以使用的

66
03:26.910 --> 03:28.223
内存总量

67-p
03:30.240 --> 03:34.290
目前大多数浏览器都不支持SIMD指令集

68
03:34.290 --> 03:37.533
有一些围绕着SIMD执行的技术提案

69
03:38.846 --> 03:41.750
在一些浏览器中也有支持

70
03:41.750 --> 03:43.540
但就可用性而言

71
03:43.540 --> 03:46.123
它仍然处在非常早期的阶段

72-p
03:47.710 --> 03:50.290
其中一个重要的方面是

73
03:50.290 --> 03:53.570
目前正在研究的SIMD技术提案

74
03:53.570 --> 03:56.440
确实强调了

75
03:56.440 --> 03:59.390
可移植性而不是性能

76
03:59.390 --> 04:03.180
这意味着我们不再能够

77
04:03.180 --> 04:06.470
访问到最底层的指令集

78
04:06.470 --> 04:10.213
而这确实对整体性能产生了影响

slide-4
04:11.970 --> 04:13.180
第三张幻灯片

80
04:13.180 --> 04:16.780
我想讨论的下一个重要领域是色彩

81-p
04:16.780 --> 04:19.500
色彩管理 宽色域

82
04:19.500 --> 04:21.110
和高动态范围功能

83
04:21.110 --> 04:23.980
对专业媒体制作至关重要

84
04:23.980 --> 04:26.470
不管是什么类型的媒体

85
04:26.470 --> 04:28.663
无论是视频摄影还是印刷品 都是如此

86-p
04:30.300 --> 04:32.230
消费类设备如手机和平板电脑

87
04:32.230 --> 04:34.260
越来越多地支持宽色域和高动态范围

88
04:34.260 --> 04:37.130
使得为这些设备

89
04:37.130 --> 04:38.490
提供显示正确色彩的能力

90
04:38.490 --> 04:40.603
变得更加重要

91-p
04:42.520 --> 04:44.700
要记住

92
04:44.700 --> 04:45.940
色彩是一个端到端的问题

93
04:45.940 --> 04:46.960
我们必须在系统的所有方面

94
04:46.960 --> 04:49.320
解决这个问题

95
04:49.320 --> 04:53.733
这包括格式 像素处理和渲染

96-p
04:55.870 --> 04:58.570
如今 像CSS4这样的标准

97
04:58.570 --> 04:59.730
正在帮助实现

98
04:59.730 --> 05:02.940
对扩展色彩空间的支持

99
05:02.940 --> 05:05.923
但这并没有在如今的所有浏览器中得到广泛支持

100-p
05:07.220 --> 05:10.210
同时 这些色彩管理能力

101
05:10.210 --> 05:12.470
也并非被所有的web组件所支持

102
05:12.470 --> 05:14.550
例如 到现在还没有一个真正的解决办法

103
05:14.550 --> 05:17.500
来确保WebGL能够

104
05:17.500 --> 05:19.843
正确地显示宽色域的内容

105-p
05:22.190 --> 05:24.220
最后 需要注意的是不同行业

106
05:24.220 --> 05:26.923
都有自己的色彩标准 这一点非常重要

107
05:27.770 --> 05:29.650
这意味着 如果我们想

108
05:29.650 --> 05:32.760
支持创建针对这些行业的工具

109
05:32.760 --> 05:36.613
web平台就需要具有包容性

slide-5
05:40.950 --> 05:41.953
第四张幻灯片

111
05:42.800 --> 05:46.653
接下来我们来谈谈磁盘和文件系统

112-p
05:47.500 --> 05:51.560
桌面创作工具大量使用本地磁盘

113
05:51.560 --> 05:53.703
并依赖于对本地文件系统的访问

114
05:54.920 --> 05:58.200
这些工具会出于各种原因使用磁盘

115
05:58.200 --> 06:01.520
可能是用来存储文件和项目

116
06:01.520 --> 06:04.250
用来导入和导出

117
06:04.250 --> 06:06.840
应用程序中的内容

118
06:06.840 --> 06:09.533
也可能用来作为暂存空间和缓存

119-p
06:12.380 --> 06:16.930
这些工具对磁盘数据传输做了很好的优化

120
06:16.930 --> 06:19.790
它们试图将数据传输操作的总数

121
06:19.790 --> 06:23.830
和传输的数据总量都降到最低

122-p
06:24.920 --> 06:27.000
如今的基于浏览器的文件访问

123
06:27.000 --> 06:30.643
并没有真正给予本地文件系统的写入权限

124
06:32.220 --> 06:35.840
而且API的层级相当高 这意味着

125
06:35.840 --> 06:38.630
很难确保数据传输处于最佳状态

126-p
06:40.500 --> 06:43.770
目前有一些提案 像域私有文件系统

127
06:43.770 --> 06:46.680
非常有希望 但需要允许

128
06:46.680 --> 06:49.323
与主机文件系统的高效导入和导出

129-p
06:51.260 --> 06:54.150
最后 许多底层能力

130
06:54.150 --> 06:56.813
在网页平台上并没有真正模拟实现

131
06:57.870 --> 07:01.790
例如 没有对稀疏文件

132
07:01.790 --> 07:03.693
或零拷贝文件传输的支持

slide-6
07:07.800 --> 07:08.840
第五张幻灯片

134
07:08.840 --> 07:10.990
我想深入探讨的最后一个话题

135
07:10.990 --> 07:14.530
是媒体的硬件编解码

136-p
07:15.540 --> 07:19.240
与典型的消费者应用相比

137
07:19.240 --> 07:23.190
专业媒体制作工具通常使用更多专业媒体格式

138
07:23.190 --> 07:27.740
例如 摄影工具会使用像TIFF

139
07:27.740 --> 07:30.960
和JPEG 2000

140
07:30.960 --> 07:33.790
以及各种不同的原始图像格式

141
07:33.790 --> 07:36.770
同样 视频处理工具会使用

142
07:36.770 --> 07:39.733
像REDCODE ARRIRAW或ProRes这类的格式

143-p
07:41.520 --> 07:44.980
对于图像处理应用

144
07:44.980 --> 07:46.860
我们可以使用WebAssembly

145
07:46.860 --> 07:48.950
来进行编码和解码

146
07:48.950 --> 07:52.320
特别是如果我们已经解决了

147
07:52.320 --> 07:54.333
刚才谈到的一些性能问题

148
07:55.450 --> 07:57.840
但视频处理就困难多了

149
07:57.840 --> 08:00.730
因为在播放 拖进度条和其他动作中

150
08:00.730 --> 08:04.263
保持良好的帧率是非常非常重要的

151-p
08:06.690 --> 08:10.500
如今 网页中的视频元素已经可以提供

152
08:10.500 --> 08:12.900
硬件加速视频的能力

153
08:13.760 --> 08:16.560
而且WebCodecs等API

154
08:16.560 --> 08:17.893
也会陆续提供这一功能

155
08:19.130 --> 08:21.970
但这些API的一个问题是

156
08:21.970 --> 08:25.800
它们只适用于主流的消费者编码格式

157
08:25.800 --> 08:27.943
如AVC VP8和VP9

158-p
08:29.470 --> 08:32.320
但媒体编解码器有一个不可避免的挑战

159
08:32.320 --> 08:34.510
那就是大多数编解码器

160
08:34.510 --> 08:37.570
都受到知识产权问题的困扰

161
08:37.570 --> 08:40.260
这使得确保它们在所有设备上都可用

162
08:40.260 --> 08:43.323
变得更加困难

163-p
08:44.800 --> 08:48.960
因此 可能我们所需要的是访问可插拔

164
08:48.960 --> 08:52.390
或模块化硬件加速能力的方法

165
08:52.390 --> 08:56.180
当某种设备能够提供这类功能时

166
08:56.180 --> 08:58.673
应用程序可以访问它

slide-7
09:01.950 --> 09:03.570
最后一张幻灯片

168
09:03.570 --> 09:05.590
我希望你喜欢这次演讲

169
09:05.590 --> 09:07.690
我想向所有帮助我准备这些材料的

170
09:07.690 --> 09:10.220
Adobe公司员工表示感谢

171
09:10.220 --> 09:12.340
我想特别感谢

172
09:12.340 --> 09:14.880
Sean Voisen提供的宝贵见解

slide-8
09:14.880 --> 09:16.163
我们研讨会上见

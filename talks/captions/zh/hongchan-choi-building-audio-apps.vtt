WEBVTT FILE

1
00:07.490 --> 00:08.930
大家好 我是Hongchan

2
00:08.930 --> 00:11.290
今天我要讲一讲

3
00:11.290 --> 00:14.792
开发 Web 音频应用的一些感想和注意事项

4
00:14.792 --> 00:16.620
本次演讲的目的

5
00:16.620 --> 00:18.510
就是给大家展示一些

6
00:18.510 --> 00:20.623
Web 媒体制作的讨论话题

7
00:22.680 --> 00:24.410
先做个简短的自我介绍

8
00:24.410 --> 00:26.510
我是Chrome Web Audio团队的技术主管

9
00:26.510 --> 00:29.433
以及 W3C 音频工作组的联合主席

10
00:31.000 --> 00:33.550
我先问大家一个问题

11
00:33.550 --> 00:35.570
如果你现在要开发一款网络音频应用

12
00:35.570 --> 00:38.463
你需要考虑哪些事情？

13
00:40.300 --> 00:42.850
显然 你首先要考虑的就是

14
00:42.850 --> 00:44.800
Web Audio API

15
00:44.800 --> 00:48.430
但我今天不打算讨论如何使用它

16
00:48.430 --> 00:50.530
它已经存在十多年了

17
00:50.530 --> 00:53.883
我们有大量的代码实例和教程

18
00:54.790 --> 00:57.610
相反 我想讨论一下它的架构

19
00:57.610 --> 00:59.443
以及工作特性

20
01:01.600 --> 01:04.450
要注意两点 首先 Web Audio API

21
01:04.450 --> 01:07.770
是一个基于图形的音频编程环境

22
01:07.770 --> 01:09.540
有一小部分音频节点

23
01:09.540 --> 01:12.143
可以相互连接形成图形

24
01:13.970 --> 01:15.420
其次 图形渲染器

25
01:15.420 --> 01:18.370
由专用的高级优先线程运行

26
01:18.370 --> 01:21.730
它通常是个实时线程

27
01:22.670 --> 01:25.800
这种设计是不可避免的 因为

28
01:25.800 --> 01:28.160
Web Audio API 是 Web 平台的一部分

29
01:28.160 --> 01:29.783
直接在应用的主线程上

30
01:29.783 --> 01:32.000
处理音频流

31
01:32.000 --> 01:34.648
通常会造成糟糕的用户体验

32
01:34.648 --> 01:38.360
这就是为什么 web 音频节点在主线程上

33
01:38.360 --> 01:41.870
而实际的音频处理 我称之为内部节点

34
01:41.870 --> 01:44.753
在一个专用的独立线程上的原因

35
01:46.300 --> 01:48.240
不管怎样 Web Audio API

36
01:48.240 --> 01:50.530
对开发人员隐藏了

37
01:50.530 --> 01:52.300
低级的音频实现

38
01:52.300 --> 01:54.680
这意味着你不必从零开始

39
01:54.680 --> 01:57.500
编写示波器 滤波器或压缩工具

40
01:57.500 --> 01:59.633
因为它已经提供给你了

41
02:01.310 --> 02:04.590
但这也意味着当你想接触裸机时

42
02:04.590 --> 02:06.490
一切就会迅速变得复杂起来

43
02:06.490 --> 02:08.560
比如用你自己的滤波器

44
02:08.560 --> 02:10.950
来处理音频样本

45
02:10.950 --> 02:12.570
对于那种用例

46
02:12.570 --> 02:15.240
Web Audio API 有 AudioWorklet

47
02:15.240 --> 02:16.210
通过这个对象

48
02:16.210 --> 02:18.540
你可以用 JavaScript 和 WebAssembly

49
02:18.540 --> 02:20.623
编写自己的音频处理模块

50
02:22.807 --> 02:25.910
另一有趣的方面是 Web Audio API

51
02:25.910 --> 02:27.540
是一个 JavaScript API

52
02:27.540 --> 02:28.500
大家都知道

53
02:28.500 --> 02:31.000
JavaScript 是一种垃圾回收语言

54
02:31.000 --> 02:32.860
有一些颇具争议的小毛病

55
02:32.860 --> 02:35.630
比如输入和作用域等等

56
02:35.630 --> 02:38.750
当你开发大规模的现实世界产品时

57
02:38.750 --> 02:40.900
你会遇到与垃圾回收

58
02:40.900 --> 02:43.650
和性能有关的问题

59
02:43.650 --> 02:45.770
这是不受你控制的

60
02:45.770 --> 02:50.830
不同浏览器中有所不同 但你必须注意

61
02:51.580 --> 02:53.230
从技术上来说 垃圾回收

62
02:53.230 --> 02:56.480
不该影响 Web Audio API 的渲染器

63
02:56.480 --> 02:59.350
因为它在不同线程上运行

64
02:59.350 --> 03:01.900
但凡事都有例外

65
03:01.900 --> 03:03.630
即使你的代码完美无瑕

66
03:03.630 --> 03:05.510
不会产生任何垃圾

67
03:05.510 --> 03:07.643
但你所用的库可能会造成浪费

68
03:07.643 --> 03:10.300
这就可能造成垃圾回收

69
03:11.120 --> 03:12.860
一次性创建太多对象

70
03:12.860 --> 03:16.500
最终会给音频渲染器带来压力

71
03:16.500 --> 03:20.100
因为音频节点是垃圾收回收的对象

72
03:20.100 --> 03:21.480
虽然内部节点不是

73
03:21.480 --> 03:23.543
但它们依然关联在一起

74
03:25.642 --> 03:27.500
那你该怎么办呢？

75
03:27.500 --> 03:30.290
你要检查并分析它的性能

76
03:30.290 --> 03:32.334
这能让你了解它何时发生

77
03:32.334 --> 03:34.530
以及如何发生

78
03:34.530 --> 03:36.799
在 Chrome 你可以用 Web Audio 性能工具包

79
03:36.799 --> 03:39.183
这是我今天的首个建议

80
03:40.450 --> 03:43.820
首先 Web Audio 开发者工具面板

81
03:43.820 --> 03:45.810
这个简单的工具能让你

82
03:45.810 --> 03:47.826
监控音频系统的健康状况

83
03:47.826 --> 03:49.763
和它的渲染能力

84
03:51.420 --> 03:53.540
如果你遇到音频故障

85
03:53.540 --> 03:56.730
很可能是以下两种情况的一种

86
03:56.730 --> 04:00.000
第一种 回调时间不规律

87
04:00.000 --> 04:01.506
当渲染器运行在低优先级线程时

88
04:01.506 --> 04:04.280
会发生这种现象

89
04:04.280 --> 04:06.640
第二种 音频处理的负荷

90
04:06.640 --> 04:08.800
超出了 CPU 的能力

91
04:08.800 --> 04:10.920
造成这种情况的原因有很多

92
04:10.920 --> 04:13.810
但到最后 你想做的太多了

93
04:13.810 --> 04:15.963
回调错过了最后期限

94
04:16.880 --> 04:19.713
开发者工具面板为两者提供了指标

95
04:22.610 --> 04:26.290
其次 我们有音频图形可视化拓展

96
04:26.290 --> 04:30.120
这是最新添加到我们工具包里的

97
04:30.120 --> 04:31.610
不是 Chrome 自带的

98
04:31.610 --> 04:34.440
所以 你必须从 Chrome 网络商店安装

99
04:34.440 --> 04:36.850
只需要安装一次即可

100
04:36.850 --> 04:40.880
这个工具至少能用在两种情况下

101
04:40.880 --> 04:43.630
首先 更大规模的网络音频应用

102
04:43.630 --> 04:47.640
通常能构建并破坏许多音频节点

103
04:47.640 --> 04:50.370
通过读取源代码很难发现它们之间的

104
04:50.370 --> 04:51.923
连接错误

105
04:52.900 --> 04:55.800
而可视化能更加准确地

106
04:55.800 --> 04:56.773
定位错误

107
04:58.100 --> 05:00.570
其次 它能让你了解

108
05:00.570 --> 05:02.770
你的图形的冗余程度

109
05:02.770 --> 05:05.760
你可能无缘无故地创建了太多增益节点

110
05:05.760 --> 05:08.660
用几个增益节点来结束一个子图

111
05:08.660 --> 05:10.530
是很常见的技术

112
05:11.610 --> 05:14.760
此外 还可能创建出孤立节点

113
05:14.760 --> 05:16.580
但它不与任何对象相连

114
05:16.580 --> 05:19.133
这也是非常普遍的

115
05:22.590 --> 05:25.900
最后 你可以用 Chrome 的跟踪工具

116
05:25.900 --> 05:27.270
这比之前的选项

117
05:27.270 --> 05:29.900
要复杂得多

118
05:29.900 --> 05:32.693
但它更全面 能洞悉一切

119
05:34.200 --> 05:38.830
你可以去 chrome://tracing 这里使用

120
05:38.830 --> 05:40.960
我建议大家读一下我写的文章

121
05:40.960 --> 05:43.650
上面解释了如何在音频应用中使用它

122
05:43.650 --> 05:46.407
你可以搜索 “Web Audio 分析应用”

123
05:48.800 --> 05:51.160
这个工具也很重要 原因有两个

124
05:51.160 --> 05:54.760
首先 它显示了事情发生的确切时间

125
05:54.760 --> 05:55.993
以及它们如何发生

126
05:56.830 --> 06:00.400
你能知道音频流出现故障的时间

127
06:00.400 --> 06:04.793
比如缓存欠载 并对原因做出合理猜测

128
06:06.500 --> 06:08.870
其次 你与 Chromium 的

129
06:08.870 --> 06:11.560
工程师沟通时 它非常有用

130
06:11.560 --> 06:12.481
我们的设置

131
06:12.481 --> 06:15.300
很可能跟你的不是完全一样的

132
06:15.300 --> 06:19.600
所以很难重现你遇到的问题

133
06:19.600 --> 06:22.670
所以 修复漏洞时 与我们交换跟踪文件

134
06:22.670 --> 06:24.693
真的有助于沟通

135
06:27.900 --> 06:29.380
好了 我们换个话题

136
06:29.380 --> 06:31.340
讨论一下别的问题

137
06:31.340 --> 06:34.300
比如设备延迟和用户隐私

138
06:34.910 --> 06:37.140
在开发客户端应用程序时

139
06:37.140 --> 06:39.600
例如工具或录音编辑软件

140
06:39.600 --> 06:43.100
或数字音频工作站 你很快会意识到

141
06:43.100 --> 06:45.370
无法使用音频设备

142
06:45.370 --> 06:49.183
是网络和本地平台之间的巨大差别

143
06:50.210 --> 06:52.180
它意味着与设备相关的设置

144
06:52.180 --> 06:55.590
例如频道数量 采样速度和缓冲的大小

145
06:55.590 --> 06:58.163
对你的应用来说都很难即时获得

146
06:59.150 --> 07:02.647
作为浏览器的开发者 我们都知道

147
07:02.647 --> 07:05.440
这对开发者来说是个很大的痛点

148
07:05.440 --> 07:07.313
但是事出有因

149
07:10.450 --> 07:13.100
这个设备相关的信息可以被广告商

150
07:13.100 --> 07:17.393
或攻击者用来推断用户的身份

151
07:18.280 --> 07:20.400
这种技术叫做指纹识别

152
07:20.400 --> 07:21.410
这也是网络上

153
07:21.410 --> 07:24.163
没有好东西的原因

154
07:25.540 --> 07:26.530
当然了

155
07:26.530 --> 07:28.980
我们有针对这种滥用的反制措施

156
07:28.980 --> 07:31.523
例如 基于约束的API模式

157
07:32.510 --> 07:34.410
应用可以请求访问

158
07:34.410 --> 07:36.310
平台会根据目前客户端的能力

159
07:36.310 --> 07:38.930
接受或拒绝访问

160
07:38.930 --> 07:41.493
这就像问“我的应用需要4个48k频道

161
07:41.493 --> 07:45.000
以及尽可能低的延迟”

162
07:45.000 --> 07:47.203
平台会接受或拒绝

163
07:48.320 --> 07:50.205
这样 就更难通过偷渡式指纹识别

164
07:50.205 --> 07:53.780
偷偷溜进去 与此同时

165
07:53.780 --> 07:55.933
我们也不会失去过多API可用性

166
07:57.920 --> 08:02.170
保护用户隐私是一件麻烦事

167
08:02.170 --> 08:06.550
它绝对是网络平台的限制因素之一

168
08:06.550 --> 08:09.590
但我觉得 API 设计中的所谓隐私

169
08:09.590 --> 08:13.403
正逐渐成为一种规范 即使在本地平台

170
08:14.940 --> 08:17.524
目前 你会发现类似的保护机制

171
08:17.524 --> 08:21.130
例如在苹果或微软系统中使用麦克风时

172
08:21.130 --> 08:24.323
出现的全系统请求允许的界面

173
08:28.400 --> 08:31.420
我们现在来谈谈延迟

174
08:31.420 --> 08:34.600
我很清楚涉及到网络平台

175
08:34.600 --> 08:35.480
这就变成了一个复杂的问题

176
08:35.480 --> 08:37.920
至少对于 Chrome Web Audio 来说

177
08:37.920 --> 08:39.730
我们的音频延迟方面

178
08:39.730 --> 08:41.673
做得不是很好

179
08:42.590 --> 08:44.140
对于音频制作应用来说

180
08:44.140 --> 08:48.120
延迟很重要的原因有两个

181
08:48.120 --> 08:51.000
首先 当你在录音或监听时

182
08:51.000 --> 08:53.470
尽可能减少延迟就变得很重要

183
08:53.470 --> 08:56.590
而且来自平台的精准的延迟报告

184
08:56.590 --> 09:00.473
对于事后的音频补偿也非常重要

185
09:02.460 --> 09:05.180
但这对浏览器来说很棘手

186
09:05.180 --> 09:08.140
浏览器需要在各种各样的平台上

187
09:08.140 --> 09:10.520
支持很多配置

188
09:10.520 --> 09:12.730
这意味着我们可能顾此失彼

189
09:12.730 --> 09:13.563
可能会缺乏

190
09:13.563 --> 09:15.903
一些明显的针对平台的特定优化

191
09:17.600 --> 09:19.100
当经验丰富的音频开发者

192
09:19.100 --> 09:23.680
投入 Chrome 音频的基础建设 指出问题时

193
09:23.680 --> 09:25.920
我们一直对此很感激

194
09:25.920 --> 09:28.653
这种情况在过去发生好几次了

195
09:31.700 --> 09:35.470
此外 Web Audio 不是平台唯一的音频 API

196
09:35.470 --> 09:38.140
WebRTC 和媒体元件

197
09:38.140 --> 09:41.310
在 Chrome 里，它们也与 Web Audio 有相同的

198
09:41.310 --> 09:42.313
基础建设

199
09:43.520 --> 09:45.820
这让我们很难做出只对 Web Audio 有益

200
09:45.820 --> 09:48.823
却对别的工具无益的巨大变革

201
09:50.220 --> 09:53.390
实时通讯和媒体通常关注的是弹性

202
09:53.390 --> 09:55.750
也就是更多的缓冲

203
09:55.750 --> 09:58.350
但Web Audio更在意低延迟

204
09:58.350 --> 10:02.100
和交互性 也就是更少的缓冲

205
10:02.100 --> 10:03.950
这种冲突使我们更难应用

206
10:03.950 --> 10:06.280
只对Web Audio

207
10:06.280 --> 10:08.230
有利的优化

208
10:10.140 --> 10:13.390
现在的情况如何呢？

209
10:13.390 --> 10:15.900
对于网络音频 需要用getUserMedia

210
10:15.900 --> 10:18.933
进行麦克风输入 然后直接输出到

211
10:18.933 --> 10:21.900
系统默认的音频设备

212
10:21.900 --> 10:25.240
但你要是想用其他音频设备

213
10:25.240 --> 10:26.913
而不是默认的呢？

214
10:27.870 --> 10:31.210
唯一已知的解决方案就是使用音频元件

215
10:31.210 --> 10:34.620
通过将 Web Audio 输出传输到特定设备的

216
10:34.620 --> 10:35.953
音频元件上

217
10:37.300 --> 10:39.550
传输通常意味着

218
10:39.550 --> 10:43.370
某些地方会进行一些缓冲

219
10:43.370 --> 10:44.920
这会导致很大的延迟

220
10:47.110 --> 10:49.570
我们能做点什么呢？

221
10:49.570 --> 10:51.480
音频工作组目前正在致力于

222
10:51.480 --> 10:53.670
创建一个新的API

223
10:53.670 --> 10:57.830
可以让你为音频选择输出设备

224
10:58.770 --> 11:01.180
理论上来说 这将确保代码路径

225
11:01.180 --> 11:03.830
将输出延迟最小化

226
11:04.660 --> 11:07.802
此外 也有人想为输入设备选择

227
11:07.802 --> 11:10.510
创建一个新的API

228
11:10.510 --> 11:13.240
我很好奇会有多少人想要这个

229
11:13.240 --> 11:14.940
请不要吝惜你的看法

230
11:16.720 --> 11:19.420
以上就是今天的全部内容 下面是总结

231
11:20.350 --> 11:21.970
我们谈到了

232
11:21.970 --> 11:24.780
Web Audio API 的设计和架构

233
11:24.780 --> 11:27.335
我还介绍了 Chrome 的 Web Audio

234
11:27.335 --> 11:31.370
性能工具包 而且我们还讨论了

235
11:31.370 --> 11:33.483
设备访问和延迟

236
11:34.540 --> 11:37.662
无论如何 这只是抛砖引玉

237
11:37.662 --> 11:40.800
不是全面的指南

238
11:40.800 --> 11:44.410
因此 我想邀请大家参加一项调查

239
11:44.410 --> 11:46.300
以便我们浏览器的开发者

240
11:46.300 --> 11:48.370
了解大家的需求

241
11:48.370 --> 11:49.263
这是链接

242
11:50.990 --> 11:52.748
最后 作为 Chrome 的技术主管

243
11:52.748 --> 11:55.434
为 Web Audio 开发健康的生态系统

244
11:55.434 --> 11:58.940
是我的职责所在 我愿意与任何

245
11:58.940 --> 12:03.193
感兴趣与我的团队合作的人建立沟通

246
12:04.220 --> 12:08.170
欢迎大家给我发邮件或推特私信我

247
12:08.170 --> 12:09.140
感谢大家的观看

248
12:09.140 --> 12:10.533
祝大家健康平安

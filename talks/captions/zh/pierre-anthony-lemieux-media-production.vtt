WEBVTT

1
00:05.400 --> 00:07.880
大家好，我是 Pierre 我也是

2
00:07.880 --> 00:09.840
此次 W3C/SMPTE Web专业媒体产品

3
00:09.840 --> 00:11.280
联合研讨会的联席主席。

5-p
00:11.960 --> 00:14.280
今天我想和大家分享一下最近的进展

6
00:14.280 --> 00:16.560
让任何一个浏览器运行专业媒体

7
00:16.560 --> 00:20.800
成为可能... 并证明它实际上是可以播放

8
00:20.800 --> 00:23.400
无损超高清视频， 直接从

9
00:23.400 --> 00:26.600
一个 HTTP 服务器，没有代理和插件。

10
00:26.600 --> 00:29.280
首先阐述一些背景。

slide-2
00:29.280 --> 00:31.000
之前在专业内容和网络浏览器之间

13
00:31.000 --> 00:33.560
有一个巨大的问题。

14
00:33.560 --> 00:36.200
两者使用不同的媒体格式和编解码器。

15
00:36.200 --> 00:39.240
两者针对了不同的体验质量。

16
00:39.240 --> 00:41.920
专业媒体内容主要是在本地

17
00:41.920 --> 00:44.160
而浏览器是互联网优先的

18
00:44.160 --> 00:45.360
……但时代变了。

slide-3
00:46.640 --> 00:48.000
首先网页浏览器

21
00:48.000 --> 00:49.880
自 2000 年以来走过了很长的道路。

22
00:49.880 --> 00:51.320
那时，Web 是文本

23
00:51.320 --> 00:54.320
偶尔会通过插件播放视频。

25-p
00:54.320 --> 00:56.800
到今天，Web 现在允许

26
00:56.800 --> 00:58.960
通过标准 API 实现复杂的多媒体体验。

28-p
00:58.960 --> 01:02.800
对于专业媒体内容尤为重要，

29
01:02.800 --> 01:05.360
WebAssembly 现在允许 C/C++ 库

30
01:05.360 --> 01:06.680
可以直接移植到 Web 上。

32-p
01:07.400 --> 01:09.360
这使得

33
01:09.360 --> 01:10.800
使用 Web 浏览器本身不支持的专业媒体格式和编解码器

34
01:10.800 --> 01:12.720
成为可能。


slide-4
01:14.320 --> 01:16.400
其次，在10年前似乎不太可能发生的事情

37
01:16.400 --> 01:19.000
发生了：

38
01:19.000 --> 01:20.600
工作室内容现在在公共云中处理。

40-p
01:20.600 --> 01:23.160
这是一个行业的惊人逆转，

41
01:23.160 --> 01:24.960
对于一个主要基于录像带

42
01:24.960 --> 01:27.480
并将互联网视为狂野西部的行业来说。

44-p
01:27.480 --> 01:28.840
这种转变的背后


45
01:28.840 --> 01:29.760
可能并不是一件事引起的。

46
01:29.760 --> 01:32.280
也许是2010年Tōhoku tsunami海啸造成的

47
01:32.280 --> 01:34.960
磁带供应中断

48
01:34.960 --> 01:36.440
或 Netflix 自己的经历

49
01:36.440 --> 01:39.440
在2008年本地数据库遭到损坏。

51-p
01:39.440 --> 01:41.360
最后，云不仅效率更高

52
01:41.360 --> 01:44.560
但也更安全，因为更少的人来处理

53
01:44.560 --> 01:46.760
内容和较少的副本。

54
01:46.760 --> 01:48.880
......现在所有主要工作室都搬走了一些

55
01:48.880 --> 01:50.360
他们的工作流到公共云。

slide-5
01:50.360 --> 01:53.360
所以我认为现在是专业媒体

58
01:53.360 --> 01:55.560
拥抱 Web 平台的时候了。

59
01:55.560 --> 01:57.400
我的个人顿悟实际上来自于

60
01:57.400 --> 01:59.120
疫情中期，当我问自己：

61
01:59.120 --> 02:00.880
可以在 Web 没有代理的浏览器中

62
02:00.880 --> 02:02.800
播放超高清无损视频吗？

slide-6
02:02.800 --> 02:07.400
专业超高清无损视频与

65
02:07.400 --> 02:09.000
本地支持的典型视频不同

66
02:09.000 --> 02:10.000
在 Web 浏览器中。

68-p
02:10.000 --> 02:13.440
图像通常以每像素48位采样，

69
02:13.440 --> 02:15.280
而不是典型的每像素24位

70
02:15.280 --> 02:16.200
的消费类视频。

72-p
02:17.200 --> 02:19.840
图像通常被无损压缩

73
02:19.840 --> 02:22.520
使用像 JPEG 2000这样的编解码器，而不是

74
02:22.520 --> 02:24.920
使用 AV1 或 AVC 有损压缩。

75
02:24.920 --> 02:27.560
结果是以 Gbps 为单位的比特率，

76
02:27.560 --> 02:29.560
与 Mbps 相对。

78-p
02:29.560 --> 02:32.360
压缩后的图像最终被包装

79
02:32.360 --> 02:34.160
像 MXF 这样的文件格式，

80
02:34.160 --> 02:36.280
与用于消费者交付的格式再次不同。

slide-7
02:36.280 --> 02:39.600
传统的 Web 浏览器中的

83
02:39.600 --> 02:41.320
专业视频播放方式

84
02:41.320 --> 02:43.800
需要转码专业视频

85
02:43.800 --> 02:44.920
转换成网络浏览器可以理解的格式。

87-p
02:44.920 --> 02:46.680
这结果在代理中。

89-p
02:46.680 --> 02:48.560
例如，从

90
02:48.560 --> 02:51.360
一个 5 Gbps JPEG 2000 MXF 文件，

91
02:51.360 --> 02:52.760
你可能会得到

92
02:52.760 --> 02:55.320
一个 50 Mbps AVC MP4 文件。

94-p
02:55.320 --> 02:58.320
这种方法有明显的缺点：

95
02:58.320 --> 03:00.560
该转换存在延迟，

96
03:00.560 --> 03:05.800
元数据和图像保真度降低。

slide-8
03:05.800 --> 03:06.800
无代理架构需要

99
03:06.800 --> 03:07.520
一种不同的方法。

101-p
03:07.520 --> 03:09.320
在这种方法中，专业视频

102
03:09.320 --> 03:11.120
使用 JPEG 2000 压缩

103
03:11.120 --> 03:12.640
并包装在一个 MXF 文件中，

104
03:12.640 --> 03:15.320
它存储在 HTTP 服务器上。

106-p
03:15.320 --> 03:16.760
使用 MXF 索引表，

107
03:16.760 --> 03:17.880
Web 应用程序可以访问每个

108
03:17.880 --> 03:19.720
直接单个图像帧

109
03:19.720 --> 03:21.920
使用标准的 HTTP 字节范围请求。

111-p
03:21.920 --> 03:23.720
视网络情况而定

112
03:23.720 --> 03:24.720
以及每帧的大小，

113
03:24.720 --> 03:26.240
Web 应用程序将最终读取

114
03:26.240 --> 03:28.120
完整或部分帧。

116-p
03:28.120 --> 03:31.800
使用开源 JPEG 2000 C++ 库

117
03:31.800 --> 03:33.000
编译为 WebAssembly，

118
03:33.000 --> 03:34.840
然后 Web 应用程序可以解码部分

119
03:34.840 --> 03:35.840
或完整的图像帧。

121-p
03:35.840 --> 03:39.160
因为帧是使用 JPEG 2000 编码的，

122
03:39.160 --> 03:41.360
解码部分帧不会失败

123
03:41.360 --> 03:43.200
反而会导致

124
03:43.200 --> 03:45.000
分辨率降低的解码图像。

slide-9
03:45.000 --> 03:49.800
这种部分读取帧的能力导致

127
03:49.800 --> 03:50.000
较低分辨率的图像是

128
03:50.000 --> 03:51.960
JPEG 2000 的标准功能

129
03:51.960 --> 03:53.680
分辨率渐进码流。

131-p
03:53.680 --> 03:57.240
在这样的码流中，低空间频率

132
03:57.240 --> 03:59.600
信息存储在低字节中

133
03:59.600 --> 04:00.320
的码流。

134
04:00.320 --> 04:03.160
而高空间频率信息

135
04:03.160 --> 04:04.840
存储在较高的字节中。

136
04:04.840 --> 04:07.800
结果，读取部分帧结果

137
04:07.800 --> 04:09.000
转换为较低分辨率的解码图像。

slide-10-p
04:09.000 --> 04:13.440
这是一个无代理架构

140
04:13.440 --> 04:14.800
的样例和概念验证，

141
04:14.800 --> 04:16.480
我鼓励你直接访问。

143-p
04:16.480 --> 04:21.160
视频是每像素 48 位的无损超高清内容，

144
04:21.160 --> 04:23.440
这相当于大约5 Gbps。

146-p
04:23.440 --> 04:25.640
该文件存储在 S3 上


147
04:25.640 --> 04:27.000
并通过 CloudFront 分发。

149-p
04:27.000 --> 04:29.280
视频的质量将取决于

150
04:29.280 --> 04:31.120
可用带宽，但不太可能

151
04:31.120 --> 04:32.680
考虑到所涉及的比特率是原始的。

153-p
04:32.680 --> 04:35.840
但是请注意，当视频暂停时，

154
04:35.840 --> 04:37.640
该应用程序可以下载全帧，

155
04:37.640 --> 04:39.720
最后展示了原始的质量。

slide-11-p
04:39.720 --> 04:44.760
这当然只是一个概念证明，


158
04:44.760 --> 04:46.200
如此多的改进是可能的。

160 人
04:46.200 --> 04:48.800
然而，它表明

161
04:48.800 --> 04:51.720
在浏览器中以适应网络条件的方式

162
04:51.720 --> 04:53.840
播放超高清无损视频是可能的，

163
04:53.840 --> 04:56.560
只使用标准 Web API 和开源库，

164
04:56.560 --> 04:58.200
没有任何特殊的网络服务器。

slide-12-p
04:58.200 --> 05:02.760
总之，我相信这是个成熟时机

167
05:02.760 --> 05:04.400
让对于专业媒体的工作流程

168
05:04.400 --> 05:05.160
去拥抱 Web 平台。

170-p
05:05.160 --> 05:08.800
Web 可以支持专业的编解码器和格式

171
05:08.800 --> 05:10.120
专业媒体正在向云端迁移。

173-p
05:10.120 --> 05:12.320
尽管如此，仍然存在一些差距。

174
05:12.320 --> 05:13.520
例如 Web 平台

175
05:13.520 --> 05:15.560
确实缺乏对高动态和广色域图像

176
05:15.560 --> 05:17.360
的支持。

177
05:17.360 --> 05:20.240
样本和准确的媒体同步

178
05:20.240 --> 05:21.160
真的可以改进。

179
05:21.160 --> 05:23.360
希望这些空白能及时填补。

181-p
05:23.360 --> 05:25.360
再次感谢收听。

182
05:25.360 --> 05:29.800
欢迎随时与我联系。再见！
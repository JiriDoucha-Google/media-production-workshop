WEBVTT FILE

1
00:07.100 --> 00:08.960
我在瑞典向大家问好

2
00:08.960 --> 00:11.580
我是来自Spotify的Ulf 负责Soundtrap业务

3
00:12.770 --> 00:13.980
下面我将为大家

4
00:13.980 --> 00:18.830
就web标准和浏览器现状的

5
00:18.830 --> 00:19.980
音频延迟做演讲

slide-2
00:21.910 --> 00:24.300
那么我们直接进入

7
00:24.300 --> 00:25.410
第二张幻灯片

8
00:25.410 --> 00:28.717
观看一段使用Soundtrap的演示

9-p
00:32.884 --> 00:35.467
（轻柔的音乐）

10-p
00:43.236 --> 00:46.319
（热情的音乐）

11-p
00:48.290 --> 00:49.230
好的

12
00:49.230 --> 00:52.580
那么你刚才看到和听到的是我在鼓捣

13
00:52.580 --> 00:54.440
产品本身的功能

14
00:54.440 --> 00:55.740
弹一些音符

15
00:55.740 --> 00:58.303
以及某个项目的回播

slide-3
01:00.760 --> 01:01.593
第三张幻灯片

17
01:01.593 --> 01:03.400
那么什么是Soundtrap呢

18-p
01:03.400 --> 01:04.800
Soundtrap其实是

19
01:04.800 --> 01:07.440
一个在线协作的DAW平台

20
01:07.440 --> 01:08.960
DAW指的是

21
01:08.960 --> 01:10.873
数字音频工作站

22-p
01:12.640 --> 01:13.710
而且

23
01:13.710 --> 01:15.633
这意味着我们有多轨编辑

24
01:15.633 --> 01:17.500
媒体录制和音乐编辑等功能

25
01:17.500 --> 01:19.900
我们有虚拟乐器

26
01:19.900 --> 01:20.830
我们有音频效果 混响 过滤器

27
01:20.830 --> 01:22.343
吉他音箱模拟等等

28
01:23.840 --> 01:26.340
我们使用了繁多的web标准来实现其功能

29
01:26.340 --> 01:29.300
如Web Audio Web MIDI

30
01:29.300 --> 01:30.820
以及MediaRecorder MediaStream

31
01:30.820 --> 01:31.920
等等诸如此类

slide-4
01:33.800 --> 01:34.790
第四张幻灯片

33-p
01:34.790 --> 01:38.280
但正如我所说 我们今天在这里集中讨论

34
01:38.280 --> 01:39.213
音频延迟方面

35
01:40.410 --> 01:41.840
而且

36
01:41.840 --> 01:46.600
它对Soundtrap的许多用例至关重要

37-p
01:46.600 --> 01:48.850
我们这里要特别提一下

38
01:49.940 --> 01:52.400
监听音频的场景

39
01:52.400 --> 01:57.720
也就是你所录制的内容的即时反馈

43
01:57.720 --> 02:01.260
也就是你用麦克风录音 在Web Audio中处理

44
02:01.260 --> 02:05.253
然后通过你的扬声器进行回放

46-p
02:06.370 --> 02:10.240
例如吉他演奏者可以把DAW平台

47
02:10.240 --> 02:13.410
用作硬件的

48
02:13.410 --> 02:15.900
替代品

49
02:15.900 --> 02:18.333
作为踏板和放大器

50-p
02:19.930 --> 02:22.380
他们要跟着耳返

51
02:22.380 --> 02:23.480
同时演奏

52
02:23.480 --> 02:25.350
那么音频输出

53
02:25.350 --> 02:26.500
最终输出的结果就很重要

54
02:26.500 --> 02:28.980
例如我需要如何调弦才能产生这种音色

55
02:28.980 --> 02:30.430
或者什么其他效果

56-p
02:31.760 --> 02:34.300
另一个例子是键盘演奏者

57
02:34.300 --> 02:37.250
使用DAW平台

58
02:37.250 --> 02:39.730
作为虚拟乐器进行演奏

59
02:39.730 --> 02:42.420
如果从按键到听到音符有很大的延迟

60
02:42.420 --> 02:44.540
你就会被打断

61
02:44.540 --> 02:47.600
除此之外 你还可以

62
02:47.600 --> 02:50.763
在现有的轨道或一组轨道上进行演奏

slide-5
02:54.309 --> 02:56.670
第五张幻灯片

64-p
02:56.670 --> 03:00.670
那么目前的现状是怎样的呢

67
03:00.670 --> 03:03.630
在最佳情况下 我们可以做到

68
03:06.950 --> 03:08.540
30毫秒的往返延迟

69
03:08.540 --> 03:12.000
对于音频监听差强人意 但还不算优秀

70
03:12.000 --> 03:14.840
我们认为在某些情况下 延迟还不够低

72
03:14.840 --> 03:17.730
说真的 我们希望能把它降得更低

73
03:17.730 --> 03:20.330
能够达到原生硬件的水平

74-p
03:21.600 --> 03:25.853
要是能达到10毫秒这样的水平就很不错了

slide-6
03:27.930 --> 03:28.940
在我们的用例中

76
03:30.730 --> 03:32.520
遇到的第二个问题

77
03:32.520 --> 03:35.670
也许对大家来说并不是特别显眼

78
03:36.950 --> 03:39.910
就是你连续记录了几段音乐

79
03:40.870 --> 03:42.365
然后你需要将它们对齐

80
03:42.365 --> 03:43.760
（轻笑）

81
03:43.760 --> 03:47.480
听上去理所当然 但比你想象的要棘手

82
03:49.700 --> 03:51.670
这就是我们所说的录音延时补偿

83
03:51.670 --> 03:54.670
可能有别的称呼

84-p
03:54.670 --> 03:59.400
为了实现这一点 你需要两方面的数据

85
03:59.400 --> 04:01.230
你需要知道

87
04:01.230 --> 04:02.540
往返的延迟是多少

88
04:02.540 --> 04:05.810
你需要知道实际的延迟是多少

89
04:05.810 --> 04:09.260
你还需要知道数据是在什么时候

90
04:09.260 --> 04:12.443
输入至你的存储或流之类的

91
04:15.440 --> 04:18.263
为了能够在之后回放时

92
04:20.000 --> 04:22.100
你所汇总的数据 你所听到的

93
04:22.100 --> 04:25.530
和你所演奏的对齐相对值应该被保留下来

slide-7
04:27.810 --> 04:28.740
第七张幻灯片

95-p
04:28.740 --> 04:32.410
那我们所说的往返延迟是什么意思呢

96
04:32.410 --> 04:35.240
其实是几方面的组合 包括了输入延迟

97
04:35.240 --> 04:38.660
处理延迟以及输出延迟

98
04:38.660 --> 04:43.000
当然这也是意料之中的

99
04:43.000 --> 04:45.593
但我们稍后再来谈它为什么会那么复杂

100-p
04:47.260 --> 04:49.910
如果我们得到的是错误信息

101
04:49.910 --> 04:51.830
或者一点信息也没有

102
04:51.830 --> 04:55.443
那么录制的音频就会错位

103
04:56.810 --> 04:58.620
当然我们也不是束手无策

104
04:58.620 --> 05:02.600
但那就涉及到高难度推测 而这并不理想

105
05:02.600 --> 05:05.990
我们想准确地知道其中涉及的延迟

106
05:05.990 --> 05:06.823
到底是多少

107-p
05:08.200 --> 05:11.210
如果什么也不做 用户将不得不手动对齐

108
05:12.330 --> 05:14.723
这远非理想的用户体验

slide-8
05:18.650 --> 05:19.830
第八张幻灯片

111-p
05:19.830 --> 05:21.290
问题是

112
05:21.290 --> 05:24.530
输入和输出路径

113
05:24.530 --> 05:26.623
都涉及到许多环节或步骤

114
05:28.450 --> 05:31.700
而这些东西在不同的音频栈

115
05:31.700 --> 05:33.723
和/或操作系统中看起来是不同的

116-p
05:34.860 --> 05:36.900
这些步骤引入的延迟

117
05:36.900 --> 05:38.340
也大相径庭

118
05:38.340 --> 05:40.700
而且并不是所有的步骤

119
05:40.700 --> 05:44.920
都能够获取其中的延迟 所以自然要尽量

120
05:44.920 --> 05:49.200
挑选能够获取的技术方案

121
05:49.200 --> 05:51.260
抱歉 是能够获取延迟的方案

122-p
05:52.850 --> 05:55.900
不仅仅是

123
05:56.000 --> 05:58.930
输入浏览器的路径或来自浏览器的路径

124
05:58.930 --> 06:00.920
可能有隐藏的延迟 如果你不够谨慎

125
06:00.920 --> 06:03.453
浏览器本身也可能存在延迟

126
06:04.720 --> 06:07.480
我们尝试在这里用

127
06:07.480 --> 06:08.640
那个

128
06:08.640 --> 06:09.610
请稍等

129
06:09.610 --> 06:14.530
我们假设MediaStreamTrack设置的latency属性

131
06:14.530 --> 06:18.480
是输入路径延迟的一项明显指标

132
06:18.480 --> 06:21.800
可能不是 但我们回过头再来说

133-p
06:21.800 --> 06:24.610
总之 我们是在Web Audio中操作

134
06:24.610 --> 06:26.560
因此这意味着我们可以

135
06:26.560 --> 06:28.100
从设置中得到这个数字

136
06:29.250 --> 06:31.900
然后我们可以看到

137
06:31.900 --> 06:33.290
一旦你进入Web Audio内

138
06:33.290 --> 06:34.470
这一数字可能就不一样了

139
06:34.470 --> 06:35.980
因为那里也有一个节点

140
06:35.980 --> 06:39.370
它可能会也可能不会做任何额外的缓冲

141
06:39.370 --> 06:42.370
而额外的缓冲或延迟信息没有办法获取

142-p
06:42.370 --> 06:44.423
但应该让我们获取

143
06:45.520 --> 06:47.220
否则我们就无法得到

144
06:47.220 --> 06:48.353
准确的数字了

slide-9
06:51.490 --> 06:52.543
第九张幻灯片

146-p
06:53.850 --> 06:55.320
为了完整阐述这个问题

147
06:55.320 --> 06:57.700
我还是再谈一下输出步骤

148
06:57.700 --> 07:00.210
和处理步骤

149-p
07:00.210 --> 07:04.740
而且它有一定的额大小或块大小

151
07:04.740 --> 07:06.700
或者是单独的额总和

152
07:06.700 --> 07:09.943
这个延迟也需要在某个地方获取和跟踪

153-p
07:11.250 --> 07:14.570
同样地 和输入延迟一样

154
07:14.570 --> 07:16.793
输出延迟也需要以某种方式获取

155-p
07:17.920 --> 07:20.580
如果你仔细看看Web Audio中的

156
07:20.580 --> 07:23.940
outputLatency属性 它似乎的确表示了

157
07:23.940 --> 07:27.500
块大小以及输出路径延迟之和

158
07:27.500 --> 07:28.763
但它并没有明确指出这一点

slide-10
07:31.300 --> 07:33.300
第十张幻灯片

160-p
07:33.890 --> 07:36.500
要正确实现延迟补偿的另一个方面

161
07:36.500 --> 07:39.370
是准确了解数据到达的时机

162
07:40.440 --> 07:44.520
正如我之前提到的

163
07:44.520 --> 07:47.700
它可以通过各种方式实现

165
07:48.770 --> 07:50.440
但是其实

166
07:50.440 --> 07:52.763
没有什么高明的方法可以做到这一点

167-p
07:54.580 --> 07:57.650
传统上 我们一直在使用MediaRecorder

168
07:59.830 --> 08:00.940
而且

169
08:00.940 --> 08:02.770
它在很多方面都很优秀

170
08:02.770 --> 08:06.000
因为它基本上能够让你实时编码

171
08:06.000 --> 08:06.640
诸如此类的

172-p
08:06.640 --> 08:07.473
但是

173
08:07.473 --> 08:12.100
就我们所看到的规格而言

174
08:12.100 --> 08:14.483
它不能保证当你启动它时 它就马上启动

176
08:14.483 --> 08:17.670
即使能做到这一点 你仍然会

177
08:17.670 --> 08:21.000
与你的采样相差一两个单位 然后它再启动

178
08:21.000 --> 08:21.400
你应该明白我的意思

179-p
08:21.940 --> 08:24.400
第二个选择可以是

180
08:24.400 --> 08:26.670
你在Worklet的基础上做一些自定义的东西

181
08:26.670 --> 08:28.300
这样你就能获取所有信息

182
08:28.300 --> 08:30.200
但你也必须从零实现所有功能

183
08:30.200 --> 08:32.560
即使是用像WebCodecs这样的东西

184
08:32.560 --> 08:34.610
你可能还是得把它打包成一个容器格式

185
08:36.260 --> 08:39.200
但是这种方式吧

186
08:39.200 --> 08:40.770
可以实现 但这并不理想

slide-11
08:43.000 --> 08:44.400
第十一张幻灯片

188-p
08:44.400 --> 08:46.300
这里总结一下演讲

189
08:46.300 --> 08:48.810
首先 输入和输出的延迟

190
08:49.930 --> 08:50.763
可能是

191
08:50.763 --> 08:52.400
规范的

192
08:52.400 --> 08:56.800
目前还不清楚它们是否符合我们预想中的

193
08:56.800 --> 08:56.913
全路径

194-p
08:58.600 --> 08:59.363
然后具体来说

195
09:01.700 --> 09:03.670
我们对MediaStreamSourceNode接口有一些想法

196
09:03.670 --> 09:08.670
以及在不同音频标准之间实现转换

197
09:08.710 --> 09:11.833
比如任何额外的延迟信息都需要获取

198-p
09:13.530 --> 09:17.000
其次 似乎有那么一个可能

199
09:17.000 --> 09:18.640
可以增强MediaStreamRecorder

200
09:18.640 --> 09:23.900
通过回调或其他方式获得准确的时间信息

202-p
09:23.900 --> 09:26.490
最后 WebCodecs很棒 但是

204
09:26.490 --> 09:28.800
我们还缺少

205
09:28.800 --> 09:31.760
打包化 或者说容器化

206
09:31.760 --> 09:34.330
或者有什么其他的叫法

207-p
09:34.330 --> 09:35.680
最后 当然

208
09:35.680 --> 09:38.520
我们只是想鼓励所有的实现者

209
09:38.520 --> 09:40.900
把输入和输出的延迟

210
09:41.620 --> 09:44.300
降低

211
09:44.300 --> 09:47.950
并选择允许获取信息的驱动程序

212
09:49.570 --> 09:50.630
毕竟工欲善其事

213
09:50.630 --> 09:51.463
必先利其器

slide-12
09:52.300 --> 09:53.590
谢谢大家 我们的演讲就到这里

215
09:53.590 --> 09:55.223
我们研讨会上见

1
00:06.570 --> 00:08.210
大家好 我是Peter

2
00:08.210 --> 00:11.970
我正在尝试在web浏览器中

3
00:11.970 --> 00:13.480
创作音乐

4-p
00:13.480 --> 00:18.480
我想在这里向各位展示的是一个

5
00:18.540 --> 00:21.688
在web浏览器中创作音乐的web应用

6
00:21.688 --> 00:24.730
本视频也是

7
00:24.730 --> 00:26.210
在同一个应用中录制的

8
00:26.210 --> 00:30.750
右下角是一个镜头视角

9
00:30.750 --> 00:33.150
左侧这一部分

10
00:33.150 --> 00:37.220
是生成音乐的代码

12-p
00:37.220 --> 00:40.220
这实际上是一个在线编程工作室

13
00:40.220 --> 00:42.730
在注释里写下要播放的音符

14
00:42.730 --> 00:46.246
还有持续时间

15
00:46.246 --> 00:48.210
和速度

16
00:48.210 --> 00:50.120
右边的代码

17
00:50.120 --> 00:53.260
是用一种叫做AssemblyScript的语言

18
00:53.260 --> 00:56.240
它可以编译成WebAssembly

19-p
00:56.240 --> 00:59.240
下面这些就是乐器

20
00:59.240 --> 01:02.560
这里实际上没有预先录制的乐器

21
01:02.560 --> 01:07.140
它是实时生成的 通过所有的运算

22
01:07.140 --> 01:10.590
和所有的代码来生成声音

23-p
01:10.590 --> 01:12.430
当我在

24
01:13.984 --> 01:15.160
（在键盘上演奏音符）

25
01:15.160 --> 01:17.915
在我的MIDI键盘上演奏时

26
01:17.915 --> 01:20.832
（弹奏键盘）

27
01:24.610 --> 01:29.100
右边的代码正在运行

28
01:29.100 --> 01:31.654
并且实时计算乐器的所有样本

29
01:31.654 --> 01:34.904
（弹奏键盘）

30-p
01:38.740 --> 01:39.661
我这里有很多乐器 比如弦乐

31
01:39.661 --> 01:42.940
（弦乐乐器音符演奏）

32
01:42.940 --> 01:47.940
你可以在下面看到它的代码

33
01:48.100 --> 01:50.290
我暂且不深入讲解这些代码

34
01:50.290 --> 01:52.815
等到下次研讨会再说

35
01:52.815 --> 01:56.650
（弹奏键盘）

36-p
01:56.960 --> 02:01.394
你可以在这里创造出很多有趣的乐器

37
02:01.394 --> 02:05.477
（长笛乐器音符演奏）

38
02:07.580 --> 02:10.846
这是笛乐 我这里还有鼓乐

39
02:10.846 --> 02:13.490
（鼓点演奏）

40-p
02:13.490 --> 02:17.720
我其实在这里录了一小段节拍

41
02:17.720 --> 02:20.290
我可以直接演奏出来

42
02:20.290 --> 02:23.279
（音乐节拍演奏）

43-p
02:25.350 --> 02:28.926
不如趁这个时候录点音乐吧？

44
02:28.926 --> 02:33.509
（用贝斯音符搭配音乐节拍）

45-p
02:51.620 --> 02:56.300
你刚才看到的是 我录完的这段音乐

46
02:56.300 --> 02:59.700
实际上变成了这些代码

47
03:00.981 --> 03:02.470
插入到了左侧栏

48
03:02.470 --> 03:05.450
有我演奏的所有音符

49
03:05.450 --> 03:09.200
还有持续时间和速度

50-p
03:09.200 --> 03:14.200
这是一套创作音乐的完整环境

51
03:14.560 --> 03:17.940
你可以录音 创造乐器

52
03:17.940 --> 03:21.910
创作完整音乐作品所需的东西都在这里

53-p
03:21.910 --> 03:26.910
但是对于音乐家和键盘手来说

54
03:27.280 --> 03:31.394
要想营造愉快的创作体验

55
03:31.394 --> 03:34.338
（弹奏键盘）

56
03:34.338 --> 03:36.670
非常重要的一点是在弹奏时

57
03:36.670 --> 03:40.431
得到MIDI键盘的即时响应

58
03:40.431 --> 03:44.450
而这只是1毫秒的问题

59
03:44.450 --> 03:47.530
如果需要10毫秒才能响应

60
03:47.530 --> 03:49.500
那就太长了

61-p
03:49.500 --> 03:51.180
在我的这台Mac上

62
03:51.180 --> 03:53.710
没有问题 它能够正常运作

63
03:53.710 --> 03:56.820
这是台低端的MacBook Air

64
03:56.820 --> 04:00.140
完全没有问题 但这种延迟

65
04:00.140 --> 04:01.683
在别的系统上

66
04:02.520 --> 04:04.190
是个挑战

67-p
04:04.190 --> 04:08.330
例如在一台Windows电脑上

68
04:08.330 --> 04:10.470
一般来说你会体验到很好的性能

69
04:10.470 --> 04:14.580
但你也会遇到10毫秒的延迟

70
04:14.580 --> 04:19.580
这对于良好的演奏体验来说实在太长了

71
04:21.540 --> 04:26.470
你可以在这种延迟下听音乐 或者玩游戏

72
04:26.470 --> 04:29.100
但当你作为音乐人使用它时

73
04:29.100 --> 04:32.400
你真的需要这种即时响应

74-p
04:32.400 --> 04:34.170
而且你也可以看到 比如说

75
04:34.170 --> 04:38.700
一台用电池的Windows笔记本电脑

76
04:38.700 --> 04:40.950
Mac就没有这种问题

77
04:40.950 --> 04:45.500
你会听到音质被削弱了

78
04:45.500 --> 04:46.580
夹杂一些杂声 一些…

79
04:49.880 --> 04:53.159
有时候甚至会直接停止 这种体验

80
04:53.159 --> 04:54.170
不应该有

81
04:54.170 --> 04:58.408
这些都是真正需要改进的地方

82
04:58.408 --> 05:02.338
因为其巨大的潜力是

83
05:02.338 --> 05:04.620
非常令人兴奋的

84
05:04.620 --> 05:08.260
这只是一个非常简单的应用

85
05:08.260 --> 05:13.140
但你可以创造完整的替代品

86
05:13.140 --> 05:17.320
替代如今音乐创作的桌面应用程序

87-p
05:17.320 --> 05:20.800
我认为把这个领域扩展到web上时

88
05:20.800 --> 05:24.693
会很有前景

89-p
05:26.490 --> 05:29.750
另外 跨浏览器支持

90
05:29.750 --> 05:32.490
例如Firefox

91
05:32.490 --> 05:35.295
现在是不支持MIDI的

92
05:35.295 --> 05:38.913
这是一个优良的AudioWorklet实现

93
05:38.913 --> 05:41.830
AudioWorklet是一种

94
05:42.715 --> 05:47.300
将WebAssembly代码与Web Audio API绑定的技术

95
05:47.300 --> 05:50.790
它使低延迟成为可能

96
05:50.790 --> 05:53.360
让你在演奏时获得即时响应

97
05:53.360 --> 05:55.430
这在Firefox上效果很好

98
05:55.430 --> 05:57.500
但没有任何关于MIDI的接口

99
05:57.500 --> 06:00.820
这就需要找到其他解决方案

100
06:00.820 --> 06:02.533
将MIDI键盘连接到Firefox

101-p
06:03.530 --> 06:08.362
为了达到这种完全可用的体验

102
06:08.362 --> 06:12.810
很重要的一点

103
06:12.810 --> 06:16.653
就是要支持不同的浏览器

104-p
06:19.102 --> 06:21.980
但除此之外

105
06:21.980 --> 06:26.160
我认为这是非常有趣的技术

106
06:26.160 --> 06:29.880
到目前为止 我已经用它创作了很多音乐

107
06:29.880 --> 06:33.780
我现在创作音乐都用它 我认为它很棒

108
06:33.780 --> 06:38.500
我真的希望以后能够看到

109
06:38.500 --> 06:42.110
在所有的浏览器或平台上

110
06:42.110 --> 06:45.743
实现稳定且性能良好的低延迟

111-p
06:47.600 --> 06:52.600
我今天想说的就是这些

112
06:52.900 --> 06:57.900
我希望在未来能引起一些关注

113
06:57.220 --> 06:58.483
感谢观看

WEBVTT FILE

1
00:05.470 --> 00:06.360
大家好

2
00:06.360 --> 00:08.100
我是Julian Fernandez-Campon

3
00:08.100 --> 00:10.320
我是Tedial的首席技术官

4
00:10.320 --> 00:13.600
今天我要展示一种全新方法

5
00:13.600 --> 00:15.560
可以最大化提升网络媒体生产效率

6
00:15.560 --> 00:17.920
即媒体无代码iPaaS的使用

slide-3
00:17.920 --> 00:20.413
目前的工作流程范式主要有两个问题

8-p
00:20.413 --> 00:22.850
首先是 平台中集成的

9
00:22.850 --> 00:25.790
每一个系统 或需集成的两个系统

10
00:25.790 --> 00:29.710
都需要知道对方的API

11
00:29.710 --> 00:34.400
这有一个问题 就是它很难升级

12
00:34.400 --> 00:35.404
很难维护

13
00:35.404 --> 00:38.760
如果我们改变了一个系统的API

14
00:38.760 --> 00:40.940
这会对集成的其它系统

15
00:40.940 --> 00:42.100
产生影响

16-p
00:42.100 --> 00:46.000
第二个问题是需要在工作流程中

17
00:46.000 --> 00:48.850
增加非具体的业务步骤

18
00:48.850 --> 00:52.330
比如 对媒体文件进行移动操作

19
00:52.330 --> 00:55.500
或者对来自一个系统的

20
00:55.500 --> 00:56.710
信息进行转换

21
00:56.710 --> 00:59.250
这同样使得解决方案

22
00:59.250 --> 01:02.640
和工作流程难以改进和维护

slide-4
01:03.810 --> 01:06.770
解决办法是建立一个集中型平台

25
01:06.770 --> 01:09.610
所有的应用程序都被注册

26
01:09.610 --> 01:13.600
并且能够通过单一终端来访问所有应用

27-p
01:13.600 --> 01:14.680
这个概念并不新鲜

28
01:14.680 --> 01:17.110
它在IT界已经存在了很多年

29
01:17.110 --> 01:18.570
比如

30
01:18.570 --> 01:21.880
九月份Gartner 2021魔力象限报告中

31
01:21.880 --> 01:25.620
就有Boomi和MuleSoft这样的关键参与者

32
01:25.620 --> 01:28.230
你们中的许多人可能也意识到了

33
01:28.230 --> 01:31.910
这种方法存在两个关键的不足

34-p
01:31.910 --> 01:34.500
第一个不足是

35
01:34.500 --> 01:36.608
它没有媒体管理的能力

36
01:36.608 --> 01:41.400
它的重心偏向控制和系统整合

37
01:41.400 --> 01:44.920
缺乏媒体管理功能

38
01:44.920 --> 01:49.130
第二个不足是它不能识别

39
01:49.130 --> 01:53.238
多站点甚至多云端

slide-5
01:55.180 --> 01:58.130
如果我们转变iPaaS的理念

42
01:58.130 --> 02:00.400
创造用于媒体的无代码iPaaS

43
02:00.400 --> 02:03.610
我们就能做到将这些

44
02:03.610 --> 02:05.860
特定活动或特定操作的

45
02:05.860 --> 02:08.740
全部工作流程

46
02:08.740 --> 02:10.910
完全删除掉

47
02:10.910 --> 02:13.500
因为它们都不是业务的组成部分

48
02:13.500 --> 02:15.970
我们会设置十分简洁的工作流程

49
02:15.970 --> 02:17.470
这些流程完全是业务导向

50-p
02:17.470 --> 02:18.770
比如这个案例中

51
02:18.770 --> 02:21.680
我们有一个简单的工作流程 有摄入编辑

52
02:21.680 --> 02:24.720
自动质量控制 验证和最终交付

53-p
02:24.720 --> 02:26.980
它有几个优点

54
02:26.980 --> 02:29.735
首先 它很简单 很容易读懂

55
02:29.735 --> 02:32.450
第二 它专注于业务

56
02:32.450 --> 02:36.570
我们不需要专家或IT人员来

57
02:36.570 --> 02:38.740
阅读和升级工作流程

58
02:38.740 --> 02:40.823
还有 它很容易设计

slide-6
02:42.650 --> 02:45.490
这些都非常棒 但是要达到这一点

60
02:45.490 --> 02:47.260
媒体无代码iPaaS

61
02:47.260 --> 02:49.780
我们需要将不同的东西标准化

62-p
02:49.780 --> 02:52.930
第一个是数据模型 可以用于编辑

63
02:52.930 --> 02:56.790
用于EBU核心 用于摄像机

64
02:56.790 --> 03:01.190
甚至SMPTE ST 2065

65-p
03:01.190 --> 03:05.100
其次 我们需要对API进行标准化

66
03:05.100 --> 03:07.390
这样平台上所有系统都说同样的语言

67
03:07.390 --> 03:09.820
提供相同的工作方法

68-p
03:09.820 --> 03:12.320
最后 我们需要以某种方式

69
03:12.320 --> 03:14.160
对网络浏览器进行标准化

70
03:14.160 --> 03:18.840
这样我们就有了媒体管理功能

71
03:18.840 --> 03:21.830
这样不管是媒体 音频字幕

72
03:21.830 --> 03:26.130
还有广播媒体都可以

73
03:26.130 --> 03:28.817
用统一的方式进行呈现

slide-7
03:30.610 --> 03:32.270
媒体无代码iPaaS的

76
03:32.270 --> 03:34.350
价值主张是什么

77-p
03:34.350 --> 03:35.470
首先是

78
03:35.470 --> 03:38.250
应用程序与平台的整合

79
03:38.250 --> 03:40.611
这样我们就有一对多的类似整合

80
03:40.611 --> 03:44.500
这意味着

81
03:44.500 --> 03:46.180
每一个功能相同的系统

82
03:46.180 --> 03:49.200
都会被发送同样的方法

83-p
03:49.200 --> 03:50.910
例如 如果有一个转码器

84
03:50.910 --> 03:54.770
方法将是“转码” 如果是AI工具

85
03:54.770 --> 03:57.800
方法就是“分析” 诸如此类

86
03:57.800 --> 03:59.420
这样我们就不会有供应商锁定

87
03:59.420 --> 04:01.600
因为如果我们想要将解码器

88
04:01.600 --> 04:04.430
或AI工具换成另一个

89
04:04.430 --> 04:07.436
将会非常简单

90-p
04:07.436 --> 04:10.860
传统的MAMs也可以被整合成另一个系统

91
04:10.860 --> 04:13.230
因为关键的一点是

92
04:13.230 --> 04:15.340
这里的解决方案

93
04:15.340 --> 04:17.630
并不对协调能力做要求

94
04:17.630 --> 04:20.770
该解决方案是一个集成平台

95
04:20.770 --> 04:22.300
可以集成一个MAM

96
04:22.300 --> 04:24.670
也可以集成

97
04:24.670 --> 04:27.160
另一个在工作中的传统MAM

98
04:27.160 --> 04:30.410
特别是在客户并不希望更换的情况下

99-p
04:30.410 --> 04:33.700
最后 很容易实现所有的工作流程

100
04:33.700 --> 04:36.600
因为它将使用无代码的方法

101
04:36.600 --> 04:39.900
这样没有深厚技术知识的人也可以

102
04:39.900 --> 04:41.873
创建工作流程 理解工作流程

103
04:41.873 --> 04:44.820
并拖放不同的工作模块

104
04:44.820 --> 04:46.137
这也是平台的一部分

slide-8
04:47.820 --> 04:50.790
媒体无代码iPaaS的三大支柱是什么

107-p
04:50.790 --> 04:53.220
第一个是公共工作空间

108
04:53.220 --> 04:56.860
所有应用程序都访问这个空间获取文件

109
04:56.860 --> 04:58.570
这个和2030 MovieLabs Vision的操作一致

110
04:58.570 --> 05:02.440
即媒体文件必须

111
05:02.440 --> 05:03.330
留在原来的位置

112
05:03.330 --> 05:05.560
而不是在不同的应用之间移动

113
05:05.560 --> 05:08.700
因为那将是非常低效的

114-p
05:08.700 --> 05:10.640
第二个是要有一个共同的工作空间

115
05:10.640 --> 05:12.470
这就是我们刚讨论过的

116
05:12.470 --> 05:15.970
所有功能相同的应用

117
05:15.970 --> 05:18.280
都需要提供相同的方法

118
05:18.280 --> 05:19.670
这就是之前所说的

119
05:19.670 --> 05:23.120
关于一对多的整合

120-p
05:23.120 --> 05:26.470
最后 所有的规范都需要同一种语言

121
05:26.470 --> 05:28.100
这就意味着

122
05:28.100 --> 05:32.780
每一个应用使用的数据模型都需要

123
05:32.780 --> 05:36.880
转译为媒体无代码iPaaS数据模型

124
05:36.880 --> 05:40.190
每一个插件或者应用都能够读取

125
05:40.190 --> 05:43.710
iPaaS数据模型

126
05:43.710 --> 05:46.410
都能够写入iPaaS数据模型

127
05:46.410 --> 05:48.280
这样 如果有另一个任务

128
05:48.280 --> 05:51.754
依赖于前一个任务的输出

129
05:51.754 --> 05:55.710
它就不需要理解前一个系统

130
05:55.710 --> 05:57.400
特有的数据模型了

130-p
05:57.400 --> 06:00.330
一个典型的例子是

131
06:00.330 --> 06:03.900
有一个AI系统为媒体文件提供注释

132
06:03.900 --> 06:05.740
然后有另一个系统

133
06:05.740 --> 06:08.650
要使用这些数据注释

134
06:08.650 --> 06:12.140
对文件内容进行验证或者进行自动化操作

135
06:12.140 --> 06:15.930
这个系统就不需要去理解

136
06:15.930 --> 06:17.514
之前AI系统独有的数据模型

slide-9
06:19.730 --> 06:20.680
在这个图中

139
06:20.680 --> 06:24.599
可以看到媒体无代码iPaaS的三个组件

140
06:24.599 --> 06:26.780
第一个是最关键的部分

141
06:26.780 --> 06:29.700
也是媒体无代码iPaaS的功能核心

142
06:29.700 --> 06:31.890
就是媒体提取层

143
06:31.890 --> 06:35.470
它将提供多站点能力

144
06:35.470 --> 06:38.200
还有对多种存储技术的支持

145
06:38.200 --> 06:39.690
具体来讲

146
06:39.690 --> 06:43.100
我们有aSTORM存储管理系统

147
06:43.100 --> 06:45.340
然后 我们需要MAM 我之前说过

148
06:45.340 --> 06:48.620
这是可选的 在这里 我们还有Evo

149
06:48.620 --> 06:51.260
同样由Tedial出品

150-p
06:51.260 --> 06:54.350
最后 我们需要智能BPM

151
06:54.350 --> 06:58.733
这个比传统BPM更高级的BPM

152
06:58.733 --> 07:03.733
可以让本地无代码范式更加容易地

153
07:03.870 --> 07:07.340
定义和实施工作流程

154
07:07.340 --> 07:10.770
在底层 我们需要有所有的业务智能 维护

155
07:10.770 --> 07:12.150
用户管理和其他

156
07:12.150 --> 07:16.380
对平台进行调整和

157
07:16.380 --> 07:17.246
监测

slide-10
07:18.670 --> 07:20.680
这里 我们可以看到所有其他元素

160
07:20.680 --> 07:22.190
它们被整合在平台内

161
07:22.190 --> 07:25.120
与其它组件一起

162
07:25.120 --> 07:26.265
以同样的方式被管理

slide-11
07:28.130 --> 07:31.460
如果我们专注于数据模型的标准化

165
07:31.460 --> 07:34.770
可以看到EBU核心是

166
07:34.770 --> 07:38.480
数据模型标准化的一个很好的选择

167
07:38.480 --> 07:39.313
因为它有几个对象 比如说

168
07:39.313 --> 07:43.237
编辑元数据 出版实体

169
07:43.237 --> 07:44.980
计划 分配

170
07:44.980 --> 07:47.730
这对需要保存信息的

171
07:47.730 --> 07:50.440
此类工作流程十分有益

172-p
07:50.440 --> 07:51.380
好的方面 或者说

173
07:51.380 --> 07:55.120
好的做法是 如果我们采用微服务的方法

174
07:55.120 --> 07:59.420
每个微服务都在升级

175
07:59.420 --> 08:01.810
一块业务导向的数据模块

slide-12
08:01.810 --> 08:04.520
如果我们考虑到所有摄像

177
08:04.520 --> 08:08.462
采集 制作所需数据模型的标准化

178
08:08.462 --> 08:11.400
ACES是比EBU核心

179
08:11.400 --> 08:12.960
更好的选择

180
08:12.960 --> 08:17.170
因为许多供应商现在都支持ACES

181
08:17.170 --> 08:18.960
一些基于ACES的现成工作流程

182
08:18.960 --> 08:23.180
十分明确并且正在有效运转

183
08:23.180 --> 08:26.860
而且 在摄像机 镜头 记录器和其他方面

184
08:26.860 --> 08:30.360
这个数据模型也组织得很好

185-p
08:30.360 --> 08:35.310
所以在SMPTE ST 2065中记录信息

186
08:35.310 --> 08:38.537
对媒体无代码iPaaS来说也是不错的选择

slide-13
08:40.290 --> 08:43.160
如果现在来看API的标准化

189
08:43.160 --> 08:44.530
这是我们之前提到的

190
08:44.530 --> 08:46.220
一对多

191
08:46.220 --> 08:49.200
我们将看到 如果每个功能相同的系统

192
08:49.200 --> 08:51.720
都提供相同的方法 这有什么好处

193
08:51.720 --> 08:55.560
还有这些系统可以被分为不同的组

194-p
08:55.560 --> 08:58.410
例如 这里我们可以看到存储引擎

195
08:58.410 --> 09:02.250
和在分发另一端的其他存储引擎上的

196
09:02.250 --> 09:04.610
媒体处理引擎

197-p
09:04.610 --> 09:07.270
这对工作流程的实施十分有益

198
09:07.270 --> 09:09.380
一切都组织有序

199
09:09.380 --> 09:11.570
可以随时更换组件

200
09:11.570 --> 09:13.401
这点我们以后会看到

slide-14
09:15.300 --> 09:19.920
如果考虑我们不同的应用实例

204
09:19.920 --> 09:22.230
第一个可能就是简易云端交付

205
09:22.230 --> 09:24.890
我们从一个S3存储桶中获取内容

206
09:24.890 --> 09:27.600
分析内容并进行转码

207
09:27.600 --> 09:29.410
最终把它交付到另一个S3存储桶中

208
09:29.410 --> 09:32.750
如你所见 这是一个简单的线性工作流程

209
09:32.750 --> 09:35.884
我们没有添加任何非业务的特殊逻辑

slide-15
09:38.520 --> 09:42.110
另一个实例是本地化

212
09:42.110 --> 09:45.230
我们在云中收到音轨 字幕

213
09:45.230 --> 09:48.100
或两者皆有 它被抓取

214
09:48.100 --> 09:49.860
并通过网络浏览器呈现

215
09:49.860 --> 09:53.370
它支持视频和音频的播放

216
09:53.370 --> 09:56.120
也支持音轨 字幕等的同步

217
09:56.120 --> 09:59.920
最终 如果没有问题

218
09:59.920 --> 10:02.800
如果准确无误 它就会向另一个目的地

219
10:02.800 --> 10:03.153
进行交付

slide-16
10:04.800 --> 10:07.540
这里 我们可以看到媒体无代码iPaaS的

221
10:07.540 --> 10:10.520
一个关键特征 就是可替换组件

222
10:10.520 --> 10:13.760
记得媒体云端分发的工作流程吗

223
10:13.760 --> 10:16.910
我们获取内容 分析内容

224
10:16.910 --> 10:20.200
转码并交付到另一个目的地

225-p
10:20.200 --> 10:21.800
如果出于某些原因

226
10:21.800 --> 10:23.650
我们需要重复工作流程 因为我们在接收

227
10:23.650 --> 10:27.130
UHD内容 我们的转码器效率不高

228
10:27.130 --> 10:30.170
或者我们需要提升转码的质量

229
10:30.170 --> 10:32.410
或者我们想要更换

230
10:32.410 --> 10:34.900
效率更高的转码器

231
10:34.900 --> 10:39.400
这个改变就像换箱子一样简单

232
10:39.400 --> 10:42.180
因为平台上的

233
10:42.180 --> 10:43.440
所有应用

234
10:43.440 --> 10:46.700
都遵从一到多的设计理念

235
10:46.700 --> 10:48.400
它们提供相同的方法

236-p
10:48.400 --> 10:51.610
所以工作流程完全不需要改变

237
10:51.610 --> 10:54.800
我们唯一需要做的就是

238
10:54.800 --> 10:58.628
使用新应用AWS Elemental的转码方法

slide-17
11:00.400 --> 11:00.960
这就是全部了

241
11:00.960 --> 11:04.830
多谢观看 希望你们能喜欢
